name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install root dependencies
      run: npm install
    
    - name: Install server dependencies
      run: |
        cd server
        npm install
    
    - name: Install client dependencies
      run: |
        cd client
        npm install
    
    - name: Run client tests
      run: |
        cd client
        npm test -- --coverage --watchAll=false --passWithNoTests
    
    - name: Build client
      run: |
        cd client
        npm run build
    
    - name: Lint client code
      run: |
        cd client
        npm run lint || echo "Linting completed with warnings"
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        cd ai
        pip install -r requirements.txt
    
    - name: Test AI model
      run: |
        cd ai
        python -c "import train_model; print('AI model imports successfully')"
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./client/coverage/lcov.info
        flags: client
        name: client-coverage

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        cd server && npm install
        cd ../client && npm install
    
    - name: Build application
      run: |
        cd client
        npm run build
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        cd ai
        pip install -r requirements.txt
    
    - name: Train AI model
      run: |
        cd ai
        python train_model.py
    
    - name: Build Docker image
      run: |
        docker build -t nasa-exoplanet-ai:${{ github.sha }} .
    
    - name: Test Docker image
      run: |
        docker run --rm -d -p 5000:5000 --name test-container nasa-exoplanet-ai:${{ github.sha }}
        sleep 10
        curl -f http://localhost:5000/api/health || exit 1
        docker stop test-container

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security audit
      run: |
        npm audit --audit-level moderate
        cd server && npm audit --audit-level moderate
        cd ../client && npm audit --audit-level moderate
    
    - name: Run Python security check
      run: |
        cd ai
        pip install safety
        safety check

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: Deploy to Heroku, Vercel, or AWS
    
    - name: Notify deployment
      run: |
        echo "Deployment completed successfully!"
